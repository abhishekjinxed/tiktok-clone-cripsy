import React, { useState } from 'react';

const SameeraMankani = () => {
  const [imageSrc, setImageSrc] = useState(null);
  const [promtimageSrc, setpromptImageSrc] = useState(null);
  const [query1, setQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [loading2, setLoading2] = useState(false);
  const [tags, setTags] = useState([]);
  const [promptimage, setPromptImage] = useState([]);
  const [currentTagIndex, setCurrentTagIndex] = useState(0); // Track the current tag index

  async function query(data) {
    setLoading(true);
    try {
      const response = await fetch(
        "https://api-inference.huggingface.co/models/abhiraoo/aimodel",
        {
          headers: {
            Authorization: "Bearer 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",
            "Content-Type": "application/json",
          },
          method: "POST",
          body: JSON.stringify(data),
        }
      );
      const blob = await response.blob();
      const imageUrl = URL.createObjectURL(blob);
      setImageSrc(imageUrl);
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
    }
  }

    const handleClick =  async () => {
      setLoading(true);
      if (!query) {
        // Handle empty query case if needed
        setLoading(false);
        return;
      }
  
      const formattedQuery = query1.trim().replace(/\s+/g, '+');

     
      if (!tags || tags.length === 0) {
        try {
          
const params = new URLSearchParams({
  q: formattedQuery,
});

          // Fetch tags and wait for the response
          const response = await fetch(`/api/scrape?${params.toString()}`);
          const data = await response.json();
         // console.log("feafea", data)
          setTags(data.tags);
          setPromptImage(data.imageUrl)
         // console.log('image:', promptimage);

          // Start with the first tag as soon as they are available
          if (data.tags.length > 0) {
            setCurrentTagIndex(0);
            setpromptImageSrc(data.imageUrl[0])
            //await query({ inputs: data.tags[0] });
          }
        } catch (error) {
          console.error('Failed to fetch tags:', error);
        }
      } else {
        // Move to the next tag
        const nextIndex = (currentTagIndex + 1) % tags.length;
        setCurrentTagIndex(nextIndex);
        //console.log(tags[nextIndex]);
        setpromptImageSrc(promptimage[nextIndex])
        //await query({ inputs: tags[nextIndex] });
      }
    
      setLoading(false); // This ensures the loading state ends quickly, not waiting for the fetch to complete
    };


    const handleGenerateClick =  async () => {
      setLoading2(true);
      const nextIndex = (currentTagIndex + 1) % tags.length;
        await query({ inputs: tags[nextIndex] });
        setLoading2(false);
    
   
    };

  return (
    <div>
       <input
        type="text"
        value={query1}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Enter your search query"
      />
    <button
  onClick={handleClick}
  disabled={loading}
  style={{
    backgroundColor: loading ? '#ccc' : '#007bff',
    color: '#fff',
    padding: '10px 20px',
    border: 'none',
    borderRadius: '5px',
    cursor: loading ? 'not-allowed' : 'pointer',
    fontSize: '16px',
    transition: 'background-color 0.3s ease',
  }}
>




  {loading ? 'Generating Prompt...' : 'Generate Prompt'}
</button>


<button
  onClick={handleGenerateClick}
  disabled={loading2}
  style={{
    backgroundColor: loading2 ? '#ccc' : '#007bff',
    color: '#fff',
    padding: '10px 20px',
    border: 'none',
    borderRadius: '5px',
    cursor: loading2 ? 'not-allowed' : 'pointer',
    fontSize: '16px',
    transition: 'background-color 0.3s ease',
  }}
>{loading2 ? 'Generating image...' : 'Generate image'}</button>




      {promtimageSrc && (
       <div style={{ color: 'black', backgroundColor: 'white', padding: '20px' }}>
         
         <p
  style={{
    fontSize: '18px',
    fontWeight: 'bold',
    color: '#4A90E2',
    marginBottom: '10px',
    textAlign: 'center',
    fontFamily: 'Arial, sans-serif',
  }}
>
  Current Tag: {tags[currentTagIndex]}
</p>
<h3
  style={{
    fontSize: '24px',
    color: '#333',
    marginTop: '20px',
    marginBottom: '15px',
    textAlign: 'center',
    fontFamily: 'Georgia, serif',
  }}
>
  Generated Image:
</h3>
<img
    src={promtimageSrc}
    style={{
      height: '100px',
      width: '120px',
      borderRadius: '8px',
      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
      transition: 'transform 0.3s ease, box-shadow 0.3s ease',
      objectFit: 'cover',
    }}
    alt="Generated by Prompt Hero"
    onMouseOver={(e) => {
      e.currentTarget.style.transform = 'scale(1.05)';
      e.currentTarget.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.3)';
    }}
    onMouseOut={(e) => {
      e.currentTarget.style.transform = 'scale(1)';
      e.currentTarget.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
    }}
  />

 <img
  src={imageSrc}
  style={{
    height: '100px',
    width: '120px',
    borderRadius: '8px',
    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
    transition: 'transform 0.3s ease, box-shadow 0.3s ease',
    objectFit: 'cover',
  }}
  alt="Generated by AI"
  onMouseOver={(e) => {
    e.currentTarget.style.transform = 'scale(1.05)';
    e.currentTarget.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.3)';
  }}
  onMouseOut={(e) => {
    e.currentTarget.style.transform = 'scale(1)';
    e.currentTarget.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
  }}
/>

<a
        href={imageSrc}
        target="_blank"
        rel="noopener noreferrer"
        style={{
          display: 'inline-block',
          marginTop: '10px',
          padding: '10px 20px',
          borderRadius: '5px',
          border: 'none',
          backgroundColor: '#007bff',
          color: '#fff',
          fontWeight: 'bold',
          textDecoration: 'none',
          textAlign: 'center',
          cursor: 'pointer',
          transition: 'background-color 0.3s ease',
        }}
      >
        Open Image URL
      </a>

        </div>
      )}
    </div>
  );
};

export default SameeraMankani;
